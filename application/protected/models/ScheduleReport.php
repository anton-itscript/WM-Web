<?php

class ScheduleReport extends CStubActiveRecord
{
	public $nextScheduleTime;
	public $nextScheduleUnixTime;
	
    public static function model($className=__CLASS__)
	{
		return parent::model($className);
    }

    public function tableName()
	{
		return 'schedule_report';
    }

    public function rules()
	{
        return array(
            array('report_type, report_format, period', 'required'),
            array('send_email_together, send_like_attach', 'safe'),

        );
    }
	
	public function relations()
    {
        return array(
            'destinations' => array(self::HAS_MANY, 'ScheduleReportDestination', 'schedule_id'),
            'station' => array(self::HAS_MANY, 'ScheduleReportToStation', 'schedule_id'),
            'processed' => array(self::HAS_MANY, 'ScheduleReportProcessed', 'schedule_id'),
        );
    }

//    public function beforeValidate()
//	{
//        foreach($this->attributes as $key => $value)
//		{
//            if ($key != 'schedule_id')
//            {
//				$this->$key = trim($value);
//			}
//        }
//
//        return parent::beforeValidate();
//    }

    public function beforeSave()
	{
        if(!$this->getUseLong()){
            if ($this->isNewRecord){
                $this->created = new CDbExpression('NOW()');
            }
            $this->updated = new CDbExpression('NOW()');
//
            // SPECI report is not auto-generated.
            // It is generated by user request, not by schedule.
            if ($this->report_type == 'speci') {
                $this->period = 0;
            }
        }
        return parent::beforeSave();
    }

    
    public static function getScheduleList()
	{
//        $sql = "SELECT `t1`.`schedule_id`,
//                       `t1`.`report_type`,
//                       `t1`.`station_id`,
//                       `t1`.`period`,
//                       `t1`.`report_format`,
//                       `t1`.`last_scheduled_run_fact`,
//                       `t1`.`last_scheduled_run_planned`,
//
//                       `t2`.`timezone_id`, `t2`.`timezone_offset`,  `t2`.`station_id_code`,
//
//                       `t3`.`schedule_processed_id`,  `t3`.`check_period_end`,
//                       `t3`.`listener_log_ids` AS `log_ids`, `t3`.`check_period_start`, `t3`.`check_period_end`,
//
//                       `t4`.`message`, `t4`.`measuring_timestamp`, `t4`.`log_id`
//                FROM `".ScheduleReport::tableName()."` `t1`
//                LEFT JOIN `".Station::tableName()."`                 `t2` ON `t2`.`station_id` = `t1`.`station_id`
//                LEFT JOIN `".ScheduleReportProcessed::tableName()."` `t3` ON (`t3`.`schedule_id` = `t1`.`schedule_id` AND `is_last` = 1 AND `is_processed` = 1)
//                LEFT JOIN `".ListenerLog::tableName()."`             `t4` ON `t4`.`log_id` = `t3`.`listener_log_id`";

//        $sql = "SELECT `t1`.`schedule_id`,
//                       `t1`.`report_type`,
//                     /* `t1`.`station_id`,*/
//                       `t1`.`period`,
//                       `t1`.`report_format`,
//                       `t1`.`last_scheduled_run_fact`,
//                       `t1`.`last_scheduled_run_planned`,
//
//                     /*  `t2`.`timezone_id`, `t2`.`timezone_offset`,  `t2`.`station_id_code`,*/
//
//                       `t3`.`schedule_processed_id`,  `t3`.`check_period_end`,
//                       `t3`.`listener_log_ids` AS `log_ids`, `t3`.`check_period_start`, `t3`.`check_period_end`,
//
//                       `t4`.`message`, `t4`.`measuring_timestamp`, `t4`.`log_id`
//                FROM `".ScheduleReport::tableName()."` `t1`
//               /* LEFT JOIN `".Station::tableName()."`                 `t2` ON `t2`.`station_id` = `t1`.`station_id`*/
//                LEFT JOIN `".ScheduleReportProcessed::tableName()."` `t3` ON `t3`.`schedule_processed_id` = (
//                    SELECT `t5`.`schedule_processed_id`
//                    FROM `".ScheduleReportProcessed::tableName()."` AS `t5`
//                    WHERE `t5`.`schedule_id` = `t1`.`schedule_id` AND `is_processed` = 1
//                    ORDER BY `t5`.`created` DESC
//                    LIMIT 1
//                )
//                LEFT JOIN `".ListenerLog::tableName()."`             `t4` ON `t4`.`log_id` = `t3`.`listener_log_id`";



        $files_path = dirname(Yii::app()->request->scriptFile) .
            DIRECTORY_SEPARATOR .'files'.
            DIRECTORY_SEPARATOR .'schedule_reports';

        $schedule_list = ScheduleReport::model()->with('station.processed.listenerLog')->with('station.realStation')->with('destinations')->findAll();

        foreach ($schedule_list as $key => $value) {
            $new_schedule_list[$key] = $value->attributes;
            foreach ($value->station AS $stationsKey => $stationsValue) {
                $new_schedule_list[$key]['station'][$stationsKey] = $stationsValue->attributes;

                foreach ($schedule_list[$key]['station'][$stationsKey]->processed as $processedKey => $processedValue) {
                    $new_schedule_list[$key]['station'][$stationsKey]['processed'][$processedKey] = $processedValue->attributes;

                    $new_schedule_list[$key]['station'][$stationsKey]['processed'][$processedKey]['listenerLog'] = $schedule_list[$key]['station'][$stationsKey]['processed'][$processedKey]['listenerLog'];

                }

                    $new_schedule_list[$key]['station'][$stationsKey]['realStation'] = $schedule_list[$key]['station'][$stationsKey]->realStation->attributes;

                    $file = $files_path . DIRECTORY_SEPARATOR . $new_schedule_list[$key]['station'][$stationsKey]['processed'][0]['schedule_processed_id'];

                    if (in_array($new_schedule_list[$key]['report_type'], array('synop', 'metar', 'speci'))
                        && isset($new_schedule_list[$key]['station'][$stationsKey]['processed'][0]['schedule_processed_id'])
                        && file_exists($file)
                    )
                    {
                        $new_schedule_list[$key]['report_string_initial'] = file_get_contents($file);
                    }
                    if (file_exists($file)) {

                        $new_schedule_list[$key]['station'][$stationsKey]['realStation']['report_string_initial']
                            =
                            file_get_contents($file);
                        $new_schedule_list[$key]['station'][$stationsKey]['realStation']['file_name']
                            =
                            $new_schedule_list[$key]['station'][$stationsKey]['realStation']['station_id_code'] .'_'.
                            strtoupper($new_schedule_list[$key]['report_type']) .'_'.
                            gmdate('Y-m-d_Hi', strtotime($new_schedule_list[$key]['station'][$stationsKey]['processed'][0]['check_period_end'])) .'.'.
                            $new_schedule_list[$key]['report_format'];
                    }


            }
            foreach ($value->destinations AS $destinationsKey => $destinationsValue) {
                $new_schedule_list[$key]['destinations'][$destinationsKey] = $destinationsValue->attributes;
            }

        }

		
        return $new_schedule_list;
    }
    
    public static function getStationsList()
	{
        $res = Station::getList("'aws','awos'", false);
        
        $return = array();
        
		if ($res)
		{
            foreach($res as $value)
			{
				$return[$value['station_id']] = $value['display_name'] .', '. $value['station_id_code'];
            }
        }
		
        return $return;
    }
}